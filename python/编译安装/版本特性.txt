
------3.11--------

1.python3.11版本最大的新功能就是添加一个新的解释器，原来解释器会将所有的python代码都解析为字节码。而这个版本的python解释器则先分析一下代码中对象的数据类型，然后将数字或者是字符串这些类型转为对应的字节码。

2.第二个新特性则是添加对解析器的扩展，对于错误和异常的处理更加方便了。因为这次的扩展功能就是，当python程序运行发生错误是会直接的告诉开发者这个错误是在哪个python文件中的那一行所引起的，并且会将引发错误的具体对象使用符号标识出来。

3.而且在3.11版本之中还对数据结构以及函数的调用进行了优化，现在函数在调用时所使用的内存和资源都更加小，并且还加快了python解释器的启动速度。

4.python3.11版本对于异常处理也做了相关的改动，在这个版本里面如果异常处理没有抛出异常的话则不会去消耗任意的内存，并且可以使用新的except语法来处理多个异常了。

5.第五个新特性则是加了一些类型提示，也就是语法提示。当这个对象的类型在使用时不匹配的话就会出现提示，主要的是字符串和可变范型提示。

------3.10--------

1.更好的错误提示：新版本中python采用了Parser特点，在出现错误时不仅仅只是提示在哪里出现错误了，还会提示错误的具体信息和解决方法，极大的提高了开发的效率。

2.结构化模式匹配：用match和case两个关键字来进行模式匹配，可以用来匹配类型和模式，大大增加了控制流的表达能力和清晰度，可以更好的理解控制流的具体含义了。

3.类型检查改进：在旧版本中是使用Union()方法来进行变量类型检查的，但是在新版中改为了使用联合运算符”|”或来取代它，使程序更简洁明了。
	Union[int, str] == int | str
4.字典增加mappin属性：3.10中对于字典的三个方法key、values、items都增加mappin的属性，三个方法调用mappin属性后会返回原来的字典数据

5.TypeAlias类型别名注释：在python中有一个概念叫做类型别名，可以给类型指定一个别名方便调用。但是在运行过程中因为没有强制定义所以检查器很难区分类型别名和普通赋值，所以新增了TypeAlias注释更明确的声明类型别名。
	# 改版后，防止 x 发生混淆
	from typing import TypeAlias
	x : TypeAlias = int
	def plus_int(a:x,b:x) -> x:
		return a+b
6.带括号的上下文管理器：现在可以在python中使用括号来表示跨多行代码的继续编写了。
   with open("xxx") as f:
       f.read()
	with (cxt1() as example,cxt2(),...):
	   pass
	with (p1.open() as f1, p2.open() as f2):
	   pass
	   
------3.9---------

1.字典并集和可迭代更新
   a={},b={},c=a+b
   a |= b
2.字符串方法
	str.removeprefix（substring：string）字符串方法：如果str以它开头的话，将会返回一个修改过前缀的新字符串，否则它将返回原始字符串。
	str.removesuffix（substring：string）字符串方法：如果str以其结尾，则返回带有修改过后缀的新字符串，否则它将返回原始字符串。
3.类型提示
	def greet_all(names: list[str]) -> None:
		for name in names:
			print("Hello", name)
4.新的数学函数
	数学模块添加和改进了许多辅助功能
5.新的解析器
	Python 3.9使用了一个新的基于PEG的解析器。以前Python使用LL（1），在构建该语言的新功能时，PEG比LL（1）更灵活。官方文档中表示，这种灵活性将在Python 3.10及更高版本中体现出来。
6.IPv6范围内的地址
	Python 3.9的另一个变化是可以指定IPv6地址的范围。IPv6范围用于指定相应IP地址在Internet的哪个部分有效
	范围可以使用％符号在IP地址的末尾指定――例如：3FFE：0：0：1：200：F8FF：FE75：50DF％2――因此该IP地址在范围2中，即链接本地地址。
7.新模块：区域信息
	zoneinfo模块将IANA时区数据库的支持引入标准库。它添加了zoneinfo.ZoneInfo，这是一个由系统时区数据支持的具体的datetime.tzinfo实现。
8.其他语言更改
	
------3.8---------

1.赋值表达式
	海象运算符是Python 3.8最明显的变化就是赋值表达式，即:=操作符。因其 := 外观而被称为海象运算符（walrus operator）。
	if m := re.match(p1, line):
		pass
2.仅通过位置指定的参数
	仅通过位置指定的参数是函数定义中的一个新语法，可以让程序员强迫某个参数只能通过位置来指定。
	下面这个例子中，参数 a 和 b 只能是位置参数，而 c 或 d 可以是位置参数，也可以是关键字参数， e 或 f 则要求是关键字参数：
	def f(a, b, /, c, d, *, e, f):    
		print(a, b, c, d, e, f)
3.支持f字符串调试
	3.6: print(f'foo={foo} bar={bar}')
		 print(f'{foo=} {bar=}')
4.多进程共享内存
	在Python 3.8中，multiprocessing模块提供了SharedMemory类，可以在不同的Python进城之间创建共享的内存区域。
	在旧版本的Python中，进程间共享数据只能通过写入文件、通过网络套接字发送，或采用Python的pickle模块进行序列化等方式。共享内存提供了进程间传递数据的更快的方式，从而使得Python的多处理器和多内核编程更有效率。
	共享内存片段可以作为单纯的字节区域来分配，也可以作为不可修改的类似于列表的对象来分配，其中能保存数字类型、字符串、字节对象、None对象等一小部分Python对象。
5.Typing模块的改进
	Python是动态类型语言，但可以通过typing模块添加类型提示，以便第三方工具验证Python代码
	final修饰器和Final类型标注表明，被修饰或被标注的对象在任何时候都不应该被重写、继承，也不能被重新赋值;
	Literal类型将表达式限定为特定的值或值的列表(不一定是同一个类型的值);
	TypedDict可以用来创建字典，其特定键的值被限制在一个或多个类型上。注意这些限制仅用于编译时确定值的合法性，而不能在运行时进行限制;
6.新版本的pickle协议
	Python 3.8引入的第5版pickle协议可以用一种新方法pickle对象，它能支持Python的缓冲区协议，如bytes、memoryviews或Numpy array等。新的pickle避免了许多在pickle这些对象时的内存复制操作。

	NumPy、Apache Arrow等外部库在各自的Python绑定中支持新的pickle协议。新的pickle也可以作为Python 3.6和3.7的插件使用，可以从PyPI上安装。
7.可反转字典
	dict = {}
	dict_r = reversed(dict)
8.性能改进
	许多内置方法和函数的速度都提高了20%~50%，因为之前许多函数都需要进行不必要的参数转换
	一个新的opcode缓存可以提高解释器中特定指令的速度。但是，目前实现了速度改进的只有LOAD_GLOBAL opcode，其速度提高了40%。以后的版本中也会进行类似的优化。
	文件复制操作如shutil.copyfile()和shutil.copytree()现在使用平台特定的调用和其他优化措施，来提高操作速度
	新创建的列表现在平均比以前小了12%，这要归功于列表构造函数如果能提前知道列表长度的情况下进行的优化。
	Python 3.8中向新型类（如class A(object)）的类变量中的写入操作变得更快。operator.itemgetter()和collections.namedtuple()也得到了速度优化。
9.Python C API和CPython实现
	Python最近的版本在CPython（C语言编写的Python的参考实现）中使用的C API重构,。到目前为止这些工作还在不断添加

	
------3.7---------

1.用于线程本地存储(TLS)的新C-API。
2.Python多语言文档，目前支持：日文、法文和 韩文，中文也有相关人正在组织翻译。
3.pyc文件的改进
4.新增内置函数 breakpoint()
5.数据类 Data Classes
6.类型模块和泛型的支持
7.自定义访问模块的属性
8.Postponed evaluation of annotations
9.支持纳秒的时间函数
10.改良的DeprecationWarning处理
11.上下文变量
12.避免使用ASCII作为默认文本编码，强制UTF-8编码，字典对象按照key的先后插入顺序的排序规则作为Python语言规范，还有其它很多方面都有显著性能提升。

------3.6---------

1.python3.6版本之中对字典数据类型的定义代码进行了重写，重写之后的字典对象在声明时所占用的内存会比原来的减少20%左右。
2.简化了类的定义和创建，现在创建类不需要强制写构造函数了，只需要在类里面写上一个pass表示这里是有代码占位的就可以定义类。
3.在格式化数字变量的时候，如果数字是00000这种不断连续的重复数字，那么会将其按照格式化字符串中的占位符将数字三个三个的分开。





















